#!/usr/bin/env python3
"""
Generate project files from Buildscripts/boards.json

Produces:
    - Firmware/Kconfig
    - Firmware/Source/Boards.h
    - Buildscripts/board.cmake
    - Buildscripts/build-and-release-all.sh

Run: python3 Buildscripts/generate_boards.py
"""

import json
import os
import re
import sys

ROOT = os.path.dirname(os.path.dirname(__file__))
BOARDS_JSON = os.path.join(ROOT, "Buildscripts", "boards.json")
OUT_KCONFIG = os.path.join(ROOT, "Firmware", "Kconfig")
OUT_BOARDS_H = os.path.join(ROOT, "Firmware", "Source", "Boards.h")
OUT_BOARDCMAKE = os.path.join(ROOT, "Buildscripts", "board.cmake")
OUT_BUILD_AND_RELEASE = os.path.join(ROOT, "Buildscripts", "build-and-release-all.sh")


def load_boards():
    if not os.path.exists(BOARDS_JSON):
        print("No Buildscripts/boards.json found; nothing to generate.")
        return []
    with open(BOARDS_JSON, "r", encoding="utf-8") as f:
        data = json.load(f)
    return data


def write_file_if_changed(path, content):
    old = None
    if os.path.exists(path):
        with open(path, "r", encoding="utf-8") as f:
            old = f.read()
    if old == content:
        print("Unchanged:", path)
        return False
    os.makedirs(os.path.dirname(path), exist_ok=True)
    with open(path, "w", encoding="utf-8") as f:
        f.write(content)
    print("Wrote", path)
    return True


def write_kconfig(boards):
    header = '''# THIS FILE IS AUTO-GENERATED by Buildscripts/generate_boards.py
# Kconfig file for Tactility example app
menu "Tactility App"
    config TT_BOARD_NAME
        string "Board Name"
        default ""
    config TT_BOARD_ID
        string "Board ID"
        default ""
    choice
        prompt "Board"
'''
    body = []
    if boards:
        first_macro = "TT_BOARD_" + re.sub(r'[^a-z0-9]+', '_', boards[0]['id'].lower()).upper()
        body.append(f'        default {first_macro}\n')
    for b in boards:
        macro = "TT_BOARD_" + re.sub(r'[^a-z0-9]+', '_', b['id'].lower()).upper()
        pretty = b.get('pretty_name', b['id'])
        body.append(f'        config {macro}\n')
        body.append(f'            bool "{pretty}"\n')
    footer = '''
        help
            Select a board/hardware configuration.
            Use TT_BOARD_CUSTOM if you will manually configure the board in your project.
    endchoice

    config TT_SPLASH_DURATION
        int "Splash Duration (ms)"
        default 1000
        range 0 3000
        help
            The minimum time to show the splash screen in milliseconds.
            When set to 0, startup will continue to desktop as soon as boot operations are finished.
endmenu
'''
    content = header + "".join(body) + footer
    return write_file_if_changed(OUT_KCONFIG, content)


def config_macro_from_id(board_id: str) -> str:
    s = re.sub(r'[^a-z0-9]+', '_', board_id.lower())
    return "CONFIG_TT_BOARD_" + s.upper()


def write_boards_h(boards):
    header = '''// THIS FILE IS AUTO-GENERATED by Buildscripts/generate_boards.py
#pragma once
#include <Tactility/hal/Configuration.h>

#ifdef ESP_PLATFORM
#include <sdkconfig.h>

// Supported hardware:
'''
    blocks = []
    for idx, b in enumerate(boards):
        cond = config_macro_from_id(b['id'])
        inc = b.get('header', '')
        hw = b.get('hardware_symbol', '')
        if idx == 0:
            blocks.append(f'#if defined({cond})')
        else:
            blocks.append(f'#elif defined({cond})')
        if inc:
            blocks.append(f'#include "{inc}"')
        if hw:
            blocks.append(f'#define TT_BOARD_HARDWARE &{hw}')
        else:
            blocks.append(f'// TODO: set TT_BOARD_HARDWARE for {b["id"]}')
    footer = '''
#else
#define TT_BOARD_HARDWARE NULL
#error Replace TT_BOARD_HARDWARE in main.c with your own. Or copy one of the ./sdkconfig.board.* files into ./sdkconfig.
#endif

#else // else simulator

#include "Simulator.h"

extern tt::hal::Configuration hardware;
#define TT_BOARD_HARDWARE &hardware

#endif // ESP_PLATFORM
'''
    content = header + "\n".join(blocks) + footer
    return write_file_if_changed(OUT_BOARDS_H, content)


def write_board_cmake(boards):
    header = '''# THIS FILE IS AUTO-GENERATED by Buildscripts/generate_boards.py
if (NOT WIN32)
    string(ASCII 27 Esc)
    set(ColorReset "${Esc}[m")
    set(Cyan "${Esc}[36m")
else ()
    set(ColorReset "")
    set(Cyan "")
endif ()

function(INIT_TACTILITY_GLOBALS SDKCONFIG_FILE)
    get_filename_component(SDKCONFIG_FILE_ABS ${SDKCONFIG_FILE} ABSOLUTE)
    # Find the board identifier in the sdkconfig file
    file(READ ${SDKCONFIG_FILE_ABS} sdkconfig_text)
    string(REGEX MATCH "(CONFIG_TT_BOARD_ID\\=\\"[a-z0-9_\\-]*\\")" sdkconfig_board_id "${sdkconfig_text}")
    if (sdkconfig_board_id STREQUAL "")
        message(FATAL_ERROR "CONFIG_TT_BOARD_ID not found in sdkconfig:\\nMake sure you copied one of the sdkconfig.board.* files into sdkconfig")
    endif ()
    string(LENGTH ${sdkconfig_board_id} sdkconfig_board_id_length)
    set(id_length 0)
    math(EXPR id_length "${sdkconfig_board_id_length} - 21")
    string(SUBSTRING ${sdkconfig_board_id} 20 ${id_length} board_id)
    message("Board name: ${Cyan}${board_id}${ColorReset}")
'''
    mapping_lines = []
    for i, b in enumerate(boards):
        bid = b['id']
        proj = b['project']
        if i == 0:
            mapping_lines.append(f'    if (board_id STREQUAL "{bid}")\n        set(TACTILITY_BOARD_PROJECT {proj})')
        else:
            mapping_lines.append(f'    elseif (board_id STREQUAL "{bid}")\n        set(TACTILITY_BOARD_PROJECT {proj})')
    mapping = "\n".join(mapping_lines)
    footer = '''
    else ()
        set(TACTILITY_BOARD_PROJECT "")
    endif ()

    if (TACTILITY_BOARD_PROJECT STREQUAL "")
        message(FATAL_ERROR "No subproject mapped to \\"${TACTILITY_BOARD_ID}\\" in root Buildscripts/board.cmake")
    else ()
        message("Board path: ${Cyan}Boards/${TACTILITY_BOARD_PROJECT}${ColorReset}\\n")
        set_property(GLOBAL PROPERTY TACTILITY_BOARD_PROJECT ${TACTILITY_BOARD_PROJECT})
        set_property(GLOBAL PROPERTY TACTILITY_BOARD_ID ${board_id})
    endif ()
endfunction()
'''
    content = header + mapping + footer
    return write_file_if_changed(OUT_BOARDCMAKE, content)


def write_build_and_release(boards):
    header = '''#!/bin/sh
# THIS FILE IS AUTO-GENERATED by Buildscripts/generate_boards.py
set -e

function build() {
    Buildscripts/build.sh $1
}

function release() {
    Buildscripts/release.sh $1
}

function releaseSdk() {
    Buildscripts/release-sdk.sh $1
}

SECONDS=0

'''
    lines = []
    for b in boards:
        sdk = b.get('sdkconfig', b['id'])
        lines.append(f'build {sdk}')
        lines.append(f'release {sdk}\n')
    footer = '''
duration=$SECONDS

echo "Finished in $((duration / 60)) minutes and $((duration % 60)) seconds."
'''
    content = header + "\n".join(lines) + footer
    return write_file_if_changed(OUT_BUILD_AND_RELEASE, content)


def main():
    boards = load_boards()
    if not boards:
        print("No boards defined in", BOARDS_JSON)
        return 0
    changed = False
    changed |= write_kconfig(boards)
    changed |= write_boards_h(boards)
    changed |= write_board_cmake(boards)
    changed |= write_build_and_release(boards)

    if changed:
        print("\n=== Generator summary ===")
        print("Some generated files changed. Commit those files to keep repository in sync.")
    else:
        print("\n=== Generator summary ===")
        print("No changes, generated files are up-to-date.")
    return 0


if __name__ == "__main__":
    sys.exit(main())