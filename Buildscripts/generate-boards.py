#!/usr/bin/env python3
"""
Generate Firmware/Kconfig from template and Buildscripts/boards.json

Run: python3 Buildscripts/generate-boards.py [--list-changed]

Options:
    --list-changed    Print the full contents of any generated files that were changed.
"""

import json
import os
import re
import sys
import argparse

ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BOARDS_JSON = os.path.join(ROOT, "Buildscripts", "boards.json")
KCONFIG_TEMPLATE = os.path.join(ROOT, "Firmware", "Kconfig.template")
OUT_KCONFIG = os.path.join(ROOT, "Firmware", "Kconfig")


def parse_args():
    p = argparse.ArgumentParser(
        description="Generate Firmware/Kconfig from template and boards.json"
    )
    p.add_argument(
        "--list-changed",
        action="store_true",
        help="If set, print the full contents of any generated files that were changed."
    )
    return p.parse_args()


def load_boards():
    """Load and validate boards.json"""
    if not os.path.exists(BOARDS_JSON):
        print(f"ERROR: {BOARDS_JSON} not found!")
        sys.exit(1)
    
    with open(BOARDS_JSON, "r", encoding="utf-8") as f:
        try:
            data = json.load(f)
        except json.JSONDecodeError as e:
            print(f"ERROR: Failed to parse {BOARDS_JSON}: {e}")
            sys.exit(1)
    
    if not isinstance(data, list):
        print(f"ERROR: {BOARDS_JSON} must contain a JSON array of boards")
        sys.exit(1)
    
    # Validate each board has required fields
    for i, board in enumerate(data):
        if not isinstance(board, dict):
            print(f"ERROR: Board at index {i} is not a JSON object")
            sys.exit(1)
        if "id" not in board:
            print(f"ERROR: Board at index {i} is missing 'id' field")
            sys.exit(1)
        if "project" not in board:
            print(f"ERROR: Board at index {i} (id: {board.get('id')}) is missing 'project' field")
            sys.exit(1)
    
    return data


def write_file_if_changed(path, content, list_changed=False):
    """Write file only if content has changed. Returns True if file was written."""
    old = None
    if os.path.exists(path):
        with open(path, "r", encoding="utf-8") as f:
            old = f.read()
    
    if old == content:
        print(f"Unchanged: {path}")
        return False
    
    os.makedirs(os.path.dirname(path), exist_ok=True)
    with open(path, "w", encoding="utf-8") as f:
        f.write(content)
    
    print(f"Generated: {path}")
    
    if list_changed:
        print(f"\n{'='*60}")
        print(f"Contents of {path}:")
        print('='*60)
        print(content)
        print('='*60 + '\n')
    
    return True


def generate_kconfig(boards, list_changed=False):
    """Generate Kconfig from template"""
    if not os.path.exists(KCONFIG_TEMPLATE):
        print(f"ERROR: Template not found: {KCONFIG_TEMPLATE}")
        print("Please create Firmware/Kconfig.template first!")
        sys.exit(1)
    
    with open(KCONFIG_TEMPLATE, "r", encoding="utf-8") as f:
        template = f.read()
    
    # Generate board config entries
    board_configs = []
    for b in boards:
        # Generate Kconfig macro name from board id
        macro = "TT_BOARD_" + re.sub(r'[^a-z0-9]+', '_', b['id'].lower()).upper()
        pretty = b.get('pretty_name', b['id'])
        
        board_configs.append(f"        config {macro}")
        board_configs.append(f'            bool "{pretty}"')
    
    # Replace placeholder in template
    board_configs_text = "\n".join(board_configs)
    content = template.replace("{{BOARD_CONFIGS}}", board_configs_text)
    
    # Add generation notice at the top if not already present
    if not content.startswith("# THIS FILE IS AUTO-GENERATED"):
        content = "# THIS FILE IS AUTO-GENERATED by Buildscripts/generate-boards.py\n" + content
    
    return write_file_if_changed(OUT_KCONFIG, content, list_changed=list_changed)


def main():
    args = parse_args()
    
    print("Tactility Board Configuration Generator")
    print("=" * 60)
    
    # Load and validate boards
    boards = load_boards()
    print(f"Loaded {len(boards)} board(s) from boards.json")
    
    # Generate Kconfig only (board.cmake now reads JSON directly!)
    changed = generate_kconfig(boards, list_changed=args.list_changed)
    
    print("=" * 60)
    if changed:
        print("Generated files updated")
        print("\nNext steps:")
        print("  1. Review the changes: git diff Firmware/Kconfig")
        print("  2. Commit the changes: git add Firmware/Kconfig && git commit")
    else:
        print("All generated files are up-to-date")
    
    return 0


if __name__ == "__main__":
    sys.exit(main())
